// Generated by TinyPG v1.3 available at www.codeproject.com

using System;
using System.Collections.Generic;

// Disable unused variable warnings which
// can happen during the parser generation.
#pragma warning disable 168

namespace TinyPG
{
    #region Parser

    public partial class Parser 
    {
        private Scanner scanner;
        private ParseTree tree;
        
        public Parser(Scanner scanner)
        {
            this.scanner = scanner;
        }

         public ParseTree Parse(string input)
        {
            return Parse(input, "", new ParseTree());
        }

        public ParseTree Parse(string input, string fileName)
        {
            return Parse(input, fileName, new ParseTree());
        }

        public ParseTree Parse(string input, string fileName, ParseTree tree)
        {
            scanner.Init(input, fileName);

            this.tree = tree;
            ParseStart(tree);
            tree.Skipped = scanner.Skipped;

            return tree;
        }

        private void ParseStart(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.Start), "Start");
            parent.Nodes.Add(node);


            
            ParseGramatica(node);

            
            tok = scanner.Scan(TokenType.EOF);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.EOF) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.EOF.ToString(), 0x1001, tok));
                return;
            }

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseGramatica(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.Gramatica), "Gramatica");
            parent.Nodes.Add(node);


            
            ParseSets(node);

            
            ParseTokens(node);

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseSets(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.Sets), "Sets");
            parent.Nodes.Add(node);

            tok = scanner.LookAhead(TokenType.PR_SETS);
            if (tok.Type == TokenType.PR_SETS)
            {

                
                tok = scanner.Scan(TokenType.PR_SETS);
                n = node.CreateNode(tok, tok.ToString() );
                node.Token.UpdateRange(tok);
                node.Nodes.Add(n);
                if (tok.Type != TokenType.PR_SETS) {
                    tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.PR_SETS.ToString(), 0x1001, tok));
                    return;
                }

                
                ParseCuerpoSets(node);
            }

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseCuerpoSets(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.CuerpoSets), "CuerpoSets");
            parent.Nodes.Add(node);

            do {
                ParseListaSets(node);
                tok = scanner.LookAhead(TokenType.IDENTIFICADOR);
            } while (tok.Type == TokenType.IDENTIFICADOR);

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseListaSets(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.ListaSets), "ListaSets");
            parent.Nodes.Add(node);


            
            tok = scanner.Scan(TokenType.IDENTIFICADOR);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.IDENTIFICADOR) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.IDENTIFICADOR.ToString(), 0x1001, tok));
                return;
            }

            
            tok = scanner.Scan(TokenType.IGUAL);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.IGUAL) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.IGUAL.ToString(), 0x1001, tok));
                return;
            }

            
            ParseSetDef(node);

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseSetDef(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.SetDef), "SetDef");
            parent.Nodes.Add(node);


            
            ParseDef(node);

            
            tok = scanner.LookAhead(TokenType.MAS);
            while (tok.Type == TokenType.MAS)
            {

                
                tok = scanner.Scan(TokenType.MAS);
                n = node.CreateNode(tok, tok.ToString() );
                node.Token.UpdateRange(tok);
                node.Nodes.Add(n);
                if (tok.Type != TokenType.MAS) {
                    tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.MAS.ToString(), 0x1001, tok));
                    return;
                }

                
                ParseDef(node);
            tok = scanner.LookAhead(TokenType.MAS);
            }

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseDef(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.Def), "Def");
            parent.Nodes.Add(node);

            tok = scanner.LookAhead(TokenType.COMILLA, TokenType.CHARF);
            switch (tok.Type)
            {
                case TokenType.COMILLA:

                    
                    tok = scanner.Scan(TokenType.COMILLA);
                    n = node.CreateNode(tok, tok.ToString() );
                    node.Token.UpdateRange(tok);
                    node.Nodes.Add(n);
                    if (tok.Type != TokenType.COMILLA) {
                        tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.COMILLA.ToString(), 0x1001, tok));
                        return;
                    }

                    
                    tok = scanner.LookAhead(TokenType.LETRA, TokenType.DIGITO);
                    switch (tok.Type)
                    {
                        case TokenType.LETRA:

                            
                            tok = scanner.Scan(TokenType.LETRA);
                            n = node.CreateNode(tok, tok.ToString() );
                            node.Token.UpdateRange(tok);
                            node.Nodes.Add(n);
                            if (tok.Type != TokenType.LETRA) {
                                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.LETRA.ToString(), 0x1001, tok));
                                return;
                            }

                            
                            tok = scanner.Scan(TokenType.COMILLA);
                            n = node.CreateNode(tok, tok.ToString() );
                            node.Token.UpdateRange(tok);
                            node.Nodes.Add(n);
                            if (tok.Type != TokenType.COMILLA) {
                                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.COMILLA.ToString(), 0x1001, tok));
                                return;
                            }

                            
                            tok = scanner.LookAhead(TokenType.DOBLEPUNTO);
                            if (tok.Type == TokenType.DOBLEPUNTO)
                            {

                                
                                tok = scanner.Scan(TokenType.DOBLEPUNTO);
                                n = node.CreateNode(tok, tok.ToString() );
                                node.Token.UpdateRange(tok);
                                node.Nodes.Add(n);
                                if (tok.Type != TokenType.DOBLEPUNTO) {
                                    tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.DOBLEPUNTO.ToString(), 0x1001, tok));
                                    return;
                                }

                                
                                tok = scanner.Scan(TokenType.COMILLA);
                                n = node.CreateNode(tok, tok.ToString() );
                                node.Token.UpdateRange(tok);
                                node.Nodes.Add(n);
                                if (tok.Type != TokenType.COMILLA) {
                                    tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.COMILLA.ToString(), 0x1001, tok));
                                    return;
                                }

                                
                                tok = scanner.Scan(TokenType.LETRA);
                                n = node.CreateNode(tok, tok.ToString() );
                                node.Token.UpdateRange(tok);
                                node.Nodes.Add(n);
                                if (tok.Type != TokenType.LETRA) {
                                    tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.LETRA.ToString(), 0x1001, tok));
                                    return;
                                }

                                
                                tok = scanner.Scan(TokenType.COMILLA);
                                n = node.CreateNode(tok, tok.ToString() );
                                node.Token.UpdateRange(tok);
                                node.Nodes.Add(n);
                                if (tok.Type != TokenType.COMILLA) {
                                    tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.COMILLA.ToString(), 0x1001, tok));
                                    return;
                                }
                            }
                            break;
                        case TokenType.DIGITO:

                            
                            tok = scanner.Scan(TokenType.DIGITO);
                            n = node.CreateNode(tok, tok.ToString() );
                            node.Token.UpdateRange(tok);
                            node.Nodes.Add(n);
                            if (tok.Type != TokenType.DIGITO) {
                                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.DIGITO.ToString(), 0x1001, tok));
                                return;
                            }

                            
                            tok = scanner.Scan(TokenType.COMILLA);
                            n = node.CreateNode(tok, tok.ToString() );
                            node.Token.UpdateRange(tok);
                            node.Nodes.Add(n);
                            if (tok.Type != TokenType.COMILLA) {
                                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.COMILLA.ToString(), 0x1001, tok));
                                return;
                            }

                            
                            tok = scanner.LookAhead(TokenType.DOBLEPUNTO);
                            if (tok.Type == TokenType.DOBLEPUNTO)
                            {

                                
                                tok = scanner.Scan(TokenType.DOBLEPUNTO);
                                n = node.CreateNode(tok, tok.ToString() );
                                node.Token.UpdateRange(tok);
                                node.Nodes.Add(n);
                                if (tok.Type != TokenType.DOBLEPUNTO) {
                                    tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.DOBLEPUNTO.ToString(), 0x1001, tok));
                                    return;
                                }

                                
                                tok = scanner.Scan(TokenType.COMILLA);
                                n = node.CreateNode(tok, tok.ToString() );
                                node.Token.UpdateRange(tok);
                                node.Nodes.Add(n);
                                if (tok.Type != TokenType.COMILLA) {
                                    tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.COMILLA.ToString(), 0x1001, tok));
                                    return;
                                }

                                
                                tok = scanner.Scan(TokenType.DIGITO);
                                n = node.CreateNode(tok, tok.ToString() );
                                node.Token.UpdateRange(tok);
                                node.Nodes.Add(n);
                                if (tok.Type != TokenType.DIGITO) {
                                    tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.DIGITO.ToString(), 0x1001, tok));
                                    return;
                                }

                                
                                tok = scanner.Scan(TokenType.COMILLA);
                                n = node.CreateNode(tok, tok.ToString() );
                                node.Token.UpdateRange(tok);
                                node.Nodes.Add(n);
                                if (tok.Type != TokenType.COMILLA) {
                                    tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.COMILLA.ToString(), 0x1001, tok));
                                    return;
                                }
                            }
                            break;
                        default:
                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected LETRA or DIGITO.", 0x0002, tok));
                            break;
                    }
                    break;
                case TokenType.CHARF:

                    
                    tok = scanner.Scan(TokenType.CHARF);
                    n = node.CreateNode(tok, tok.ToString() );
                    node.Token.UpdateRange(tok);
                    node.Nodes.Add(n);
                    if (tok.Type != TokenType.CHARF) {
                        tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.CHARF.ToString(), 0x1001, tok));
                        return;
                    }

                    
                    tok = scanner.Scan(TokenType.PABIERTO);
                    n = node.CreateNode(tok, tok.ToString() );
                    node.Token.UpdateRange(tok);
                    node.Nodes.Add(n);
                    if (tok.Type != TokenType.PABIERTO) {
                        tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.PABIERTO.ToString(), 0x1001, tok));
                        return;
                    }

                    
                    tok = scanner.Scan(TokenType.NUMERO);
                    n = node.CreateNode(tok, tok.ToString() );
                    node.Token.UpdateRange(tok);
                    node.Nodes.Add(n);
                    if (tok.Type != TokenType.NUMERO) {
                        tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.NUMERO.ToString(), 0x1001, tok));
                        return;
                    }

                    
                    tok = scanner.Scan(TokenType.PCERRADO);
                    n = node.CreateNode(tok, tok.ToString() );
                    node.Token.UpdateRange(tok);
                    node.Nodes.Add(n);
                    if (tok.Type != TokenType.PCERRADO) {
                        tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.PCERRADO.ToString(), 0x1001, tok));
                        return;
                    }

                    
                    tok = scanner.LookAhead(TokenType.DOBLEPUNTO);
                    if (tok.Type == TokenType.DOBLEPUNTO)
                    {

                        
                        tok = scanner.Scan(TokenType.DOBLEPUNTO);
                        n = node.CreateNode(tok, tok.ToString() );
                        node.Token.UpdateRange(tok);
                        node.Nodes.Add(n);
                        if (tok.Type != TokenType.DOBLEPUNTO) {
                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.DOBLEPUNTO.ToString(), 0x1001, tok));
                            return;
                        }

                        
                        tok = scanner.Scan(TokenType.CHARF);
                        n = node.CreateNode(tok, tok.ToString() );
                        node.Token.UpdateRange(tok);
                        node.Nodes.Add(n);
                        if (tok.Type != TokenType.CHARF) {
                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.CHARF.ToString(), 0x1001, tok));
                            return;
                        }

                        
                        tok = scanner.Scan(TokenType.PABIERTO);
                        n = node.CreateNode(tok, tok.ToString() );
                        node.Token.UpdateRange(tok);
                        node.Nodes.Add(n);
                        if (tok.Type != TokenType.PABIERTO) {
                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.PABIERTO.ToString(), 0x1001, tok));
                            return;
                        }

                        
                        tok = scanner.Scan(TokenType.NUMERO);
                        n = node.CreateNode(tok, tok.ToString() );
                        node.Token.UpdateRange(tok);
                        node.Nodes.Add(n);
                        if (tok.Type != TokenType.NUMERO) {
                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.NUMERO.ToString(), 0x1001, tok));
                            return;
                        }

                        
                        tok = scanner.Scan(TokenType.PCERRADO);
                        n = node.CreateNode(tok, tok.ToString() );
                        node.Token.UpdateRange(tok);
                        node.Nodes.Add(n);
                        if (tok.Type != TokenType.PCERRADO) {
                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.PCERRADO.ToString(), 0x1001, tok));
                            return;
                        }
                    }
                    break;
                default:
                    tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected COMILLA or CHARF.", 0x0002, tok));
                    break;
            }

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseTokens(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.Tokens), "Tokens");
            parent.Nodes.Add(node);


            
            ParseDeclaracionTokens(node);

            
            ParseAcciones(node);

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseDeclaracionTokens(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.DeclaracionTokens), "DeclaracionTokens");
            parent.Nodes.Add(node);


            
            tok = scanner.Scan(TokenType.PR_TOKENS);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.PR_TOKENS) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.PR_TOKENS.ToString(), 0x1001, tok));
                return;
            }

            
            ParseCuerpoTokens(node);

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseCuerpoTokens(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.CuerpoTokens), "CuerpoTokens");
            parent.Nodes.Add(node);

            do {
                ParseListaTokens(node);
                tok = scanner.LookAhead(TokenType.PR_TOKEN);
            } while (tok.Type == TokenType.PR_TOKEN);

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseListaTokens(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.ListaTokens), "ListaTokens");
            parent.Nodes.Add(node);


            
            tok = scanner.Scan(TokenType.PR_TOKEN);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.PR_TOKEN) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.PR_TOKEN.ToString(), 0x1001, tok));
                return;
            }

            
            tok = scanner.Scan(TokenType.NUMERO);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.NUMERO) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.NUMERO.ToString(), 0x1001, tok));
                return;
            }

            
            tok = scanner.Scan(TokenType.IGUAL);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.IGUAL) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.IGUAL.ToString(), 0x1001, tok));
                return;
            }

            
            ParseListaDefToken(node);

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseListaDefToken(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.ListaDefToken), "ListaDefToken");
            parent.Nodes.Add(node);

            do {
                ParseCondicionToken(node);
                tok = scanner.LookAhead(TokenType.COMILLA, TokenType.LLABIERTA, TokenType.IDENTIFICADOR, TokenType.PABIERTO);
            } while (tok.Type == TokenType.COMILLA
                || tok.Type == TokenType.LLABIERTA
                || tok.Type == TokenType.IDENTIFICADOR
                || tok.Type == TokenType.PABIERTO);

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseCondicionToken(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.CondicionToken), "CondicionToken");
            parent.Nodes.Add(node);


            
            ParseDefToken(node);

            
            ParseOpcionalToken(node);

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseOpcionalToken(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.OpcionalToken), "OpcionalToken");
            parent.Nodes.Add(node);

            tok = scanner.LookAhead(TokenType.OPCIONAL);
            if (tok.Type == TokenType.OPCIONAL)
            {

                
                tok = scanner.Scan(TokenType.OPCIONAL);
                n = node.CreateNode(tok, tok.ToString() );
                node.Token.UpdateRange(tok);
                node.Nodes.Add(n);
                if (tok.Type != TokenType.OPCIONAL) {
                    tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.OPCIONAL.ToString(), 0x1001, tok));
                    return;
                }

                
                ParseDefToken(node);
            }

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseDefToken(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.DefToken), "DefToken");
            parent.Nodes.Add(node);

            tok = scanner.LookAhead(TokenType.COMILLA, TokenType.LLABIERTA, TokenType.IDENTIFICADOR, TokenType.PABIERTO);
            switch (tok.Type)
            {
                case TokenType.COMILLA:
                case TokenType.LLABIERTA:
                case TokenType.IDENTIFICADOR:
                    ParseSimpleToken(node);
                    break;
                case TokenType.PABIERTO:
                    ParseAgrupaToken(node);
                    break;
                default:
                    tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected COMILLA, LLABIERTA, IDENTIFICADOR, or PABIERTO.", 0x0002, tok));
                    break;
            }

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseSimpleToken(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.SimpleToken), "SimpleToken");
            parent.Nodes.Add(node);

            tok = scanner.LookAhead(TokenType.COMILLA, TokenType.LLABIERTA, TokenType.IDENTIFICADOR);
            switch (tok.Type)
            {
                case TokenType.COMILLA:

                    
                    tok = scanner.Scan(TokenType.COMILLA);
                    n = node.CreateNode(tok, tok.ToString() );
                    node.Token.UpdateRange(tok);
                    node.Nodes.Add(n);
                    if (tok.Type != TokenType.COMILLA) {
                        tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.COMILLA.ToString(), 0x1001, tok));
                        return;
                    }

                    
                    tok = scanner.Scan(TokenType.CARACTER);
                    n = node.CreateNode(tok, tok.ToString() );
                    node.Token.UpdateRange(tok);
                    node.Nodes.Add(n);
                    if (tok.Type != TokenType.CARACTER) {
                        tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.CARACTER.ToString(), 0x1001, tok));
                        return;
                    }

                    
                    tok = scanner.Scan(TokenType.COMILLA);
                    n = node.CreateNode(tok, tok.ToString() );
                    node.Token.UpdateRange(tok);
                    node.Nodes.Add(n);
                    if (tok.Type != TokenType.COMILLA) {
                        tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.COMILLA.ToString(), 0x1001, tok));
                        return;
                    }

                    
                    tok = scanner.LookAhead(TokenType.MODIFICADOR);
                    if (tok.Type == TokenType.MODIFICADOR)
                    {
                        tok = scanner.Scan(TokenType.MODIFICADOR);
                        n = node.CreateNode(tok, tok.ToString() );
                        node.Token.UpdateRange(tok);
                        node.Nodes.Add(n);
                        if (tok.Type != TokenType.MODIFICADOR) {
                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.MODIFICADOR.ToString(), 0x1001, tok));
                            return;
                        }
                    }
                    break;
                case TokenType.LLABIERTA:

                    
                    tok = scanner.Scan(TokenType.LLABIERTA);
                    n = node.CreateNode(tok, tok.ToString() );
                    node.Token.UpdateRange(tok);
                    node.Nodes.Add(n);
                    if (tok.Type != TokenType.LLABIERTA) {
                        tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.LLABIERTA.ToString(), 0x1001, tok));
                        return;
                    }

                    
                    tok = scanner.Scan(TokenType.IDENTIFICADOR);
                    n = node.CreateNode(tok, tok.ToString() );
                    node.Token.UpdateRange(tok);
                    node.Nodes.Add(n);
                    if (tok.Type != TokenType.IDENTIFICADOR) {
                        tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.IDENTIFICADOR.ToString(), 0x1001, tok));
                        return;
                    }

                    
                    tok = scanner.Scan(TokenType.PABIERTO);
                    n = node.CreateNode(tok, tok.ToString() );
                    node.Token.UpdateRange(tok);
                    node.Nodes.Add(n);
                    if (tok.Type != TokenType.PABIERTO) {
                        tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.PABIERTO.ToString(), 0x1001, tok));
                        return;
                    }

                    
                    tok = scanner.Scan(TokenType.PCERRADO);
                    n = node.CreateNode(tok, tok.ToString() );
                    node.Token.UpdateRange(tok);
                    node.Nodes.Add(n);
                    if (tok.Type != TokenType.PCERRADO) {
                        tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.PCERRADO.ToString(), 0x1001, tok));
                        return;
                    }

                    
                    tok = scanner.Scan(TokenType.LLCERRADA);
                    n = node.CreateNode(tok, tok.ToString() );
                    node.Token.UpdateRange(tok);
                    node.Nodes.Add(n);
                    if (tok.Type != TokenType.LLCERRADA) {
                        tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.LLCERRADA.ToString(), 0x1001, tok));
                        return;
                    }
                    break;
                case TokenType.IDENTIFICADOR:

                    
                    tok = scanner.Scan(TokenType.IDENTIFICADOR);
                    n = node.CreateNode(tok, tok.ToString() );
                    node.Token.UpdateRange(tok);
                    node.Nodes.Add(n);
                    if (tok.Type != TokenType.IDENTIFICADOR) {
                        tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.IDENTIFICADOR.ToString(), 0x1001, tok));
                        return;
                    }

                    
                    tok = scanner.LookAhead(TokenType.MODIFICADOR);
                    if (tok.Type == TokenType.MODIFICADOR)
                    {
                        tok = scanner.Scan(TokenType.MODIFICADOR);
                        n = node.CreateNode(tok, tok.ToString() );
                        node.Token.UpdateRange(tok);
                        node.Nodes.Add(n);
                        if (tok.Type != TokenType.MODIFICADOR) {
                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.MODIFICADOR.ToString(), 0x1001, tok));
                            return;
                        }
                    }
                    break;
                default:
                    tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected COMILLA, LLABIERTA, or IDENTIFICADOR.", 0x0002, tok));
                    break;
            }

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseAgrupaToken(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.AgrupaToken), "AgrupaToken");
            parent.Nodes.Add(node);


            
            tok = scanner.Scan(TokenType.PABIERTO);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.PABIERTO) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.PABIERTO.ToString(), 0x1001, tok));
                return;
            }

            
            ParseCondicionToken(node);

            
            tok = scanner.Scan(TokenType.PCERRADO);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.PCERRADO) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.PCERRADO.ToString(), 0x1001, tok));
                return;
            }

            
            tok = scanner.LookAhead(TokenType.MODIFICADOR);
            if (tok.Type == TokenType.MODIFICADOR)
            {
                tok = scanner.Scan(TokenType.MODIFICADOR);
                n = node.CreateNode(tok, tok.ToString() );
                node.Token.UpdateRange(tok);
                node.Nodes.Add(n);
                if (tok.Type != TokenType.MODIFICADOR) {
                    tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.MODIFICADOR.ToString(), 0x1001, tok));
                    return;
                }
            }

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseAcciones(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.Acciones), "Acciones");
            parent.Nodes.Add(node);


            
            ParseDeclaracionAcciones(node);

            
            ParseErrores(node);

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseDeclaracionAcciones(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.DeclaracionAcciones), "DeclaracionAcciones");
            parent.Nodes.Add(node);


            
            tok = scanner.Scan(TokenType.PR_ACCIONES);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.PR_ACCIONES) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.PR_ACCIONES.ToString(), 0x1001, tok));
                return;
            }

            
            ParseCuerpoAcciones(node);

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseCuerpoAcciones(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.CuerpoAcciones), "CuerpoAcciones");
            parent.Nodes.Add(node);


            
            ParseFuncionReservadas(node);

            
            ParseListaFunciones(node);

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseFuncionReservadas(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.FuncionReservadas), "FuncionReservadas");
            parent.Nodes.Add(node);


            
            tok = scanner.Scan(TokenType.PR_RESERVADAS);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.PR_RESERVADAS) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.PR_RESERVADAS.ToString(), 0x1001, tok));
                return;
            }

            
            tok = scanner.Scan(TokenType.PABIERTO);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.PABIERTO) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.PABIERTO.ToString(), 0x1001, tok));
                return;
            }

            
            tok = scanner.Scan(TokenType.PCERRADO);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.PCERRADO) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.PCERRADO.ToString(), 0x1001, tok));
                return;
            }

            
            ParseCuerpoFunciones(node);

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseCuerpoFunciones(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.CuerpoFunciones), "CuerpoFunciones");
            parent.Nodes.Add(node);


            
            tok = scanner.Scan(TokenType.LLABIERTA);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.LLABIERTA) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.LLABIERTA.ToString(), 0x1001, tok));
                return;
            }

            
            do {
                ParseListaAcciones(node);
                tok = scanner.LookAhead(TokenType.NUMERO);
            } while (tok.Type == TokenType.NUMERO);

            
            tok = scanner.Scan(TokenType.LLCERRADA);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.LLCERRADA) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.LLCERRADA.ToString(), 0x1001, tok));
                return;
            }

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseListaAcciones(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.ListaAcciones), "ListaAcciones");
            parent.Nodes.Add(node);


            
            tok = scanner.Scan(TokenType.NUMERO);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.NUMERO) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.NUMERO.ToString(), 0x1001, tok));
                return;
            }

            
            tok = scanner.Scan(TokenType.IGUAL);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.IGUAL) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.IGUAL.ToString(), 0x1001, tok));
                return;
            }

            
            tok = scanner.Scan(TokenType.COMILLA);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.COMILLA) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.COMILLA.ToString(), 0x1001, tok));
                return;
            }

            
            tok = scanner.Scan(TokenType.IDENTIFICADOR);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.IDENTIFICADOR) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.IDENTIFICADOR.ToString(), 0x1001, tok));
                return;
            }

            
            tok = scanner.Scan(TokenType.COMILLA);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.COMILLA) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.COMILLA.ToString(), 0x1001, tok));
                return;
            }

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseListaFunciones(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.ListaFunciones), "ListaFunciones");
            parent.Nodes.Add(node);

            tok = scanner.LookAhead(TokenType.IDENTIFICADOR);
            while (tok.Type == TokenType.IDENTIFICADOR)
            {
                ParseOtrasFunciones(node);
            tok = scanner.LookAhead(TokenType.IDENTIFICADOR);
            }

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseOtrasFunciones(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.OtrasFunciones), "OtrasFunciones");
            parent.Nodes.Add(node);


            
            tok = scanner.Scan(TokenType.IDENTIFICADOR);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.IDENTIFICADOR) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.IDENTIFICADOR.ToString(), 0x1001, tok));
                return;
            }

            
            tok = scanner.Scan(TokenType.PABIERTO);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.PABIERTO) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.PABIERTO.ToString(), 0x1001, tok));
                return;
            }

            
            tok = scanner.Scan(TokenType.PCERRADO);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.PCERRADO) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.PCERRADO.ToString(), 0x1001, tok));
                return;
            }

            
            ParseCuerpoFunciones(node);

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseErrores(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.Errores), "Errores");
            parent.Nodes.Add(node);

            do {
                ParseListaErrores(node);
                tok = scanner.LookAhead(TokenType.IDERROR);
            } while (tok.Type == TokenType.IDERROR);

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseListaErrores(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.ListaErrores), "ListaErrores");
            parent.Nodes.Add(node);


            
            tok = scanner.Scan(TokenType.IDERROR);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.IDERROR) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.IDERROR.ToString(), 0x1001, tok));
                return;
            }

            
            tok = scanner.Scan(TokenType.IGUAL);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.IGUAL) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.IGUAL.ToString(), 0x1001, tok));
                return;
            }

            
            tok = scanner.Scan(TokenType.NUMERO);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.NUMERO) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.NUMERO.ToString(), 0x1001, tok));
                return;
            }

            parent.Token.UpdateRange(node.Token);
        }


    }

    #endregion Parser
}
